/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef adv_H
#define adv_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(_Adv_Int8_defined)
#define _Adv_Int8_defined 1
   typedef CORBA_char Adv_Int8;
#if !defined(TC_IMPL_TC_Adv_Int8)
#define TC_IMPL_TC_Adv_Int8 ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Int8_struct;
#define TC_Adv_Int8 ((CORBA_TypeCode)&TC_Adv_Int8_struct)
#endif
#endif
#if !defined(_Adv_Int16_defined)
#define _Adv_Int16_defined 1
   typedef CORBA_short Adv_Int16;
#if !defined(TC_IMPL_TC_Adv_Int16)
#define TC_IMPL_TC_Adv_Int16 ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Int16_struct;
#define TC_Adv_Int16 ((CORBA_TypeCode)&TC_Adv_Int16_struct)
#endif
#endif
#if !defined(_Adv_Int32_defined)
#define _Adv_Int32_defined 1
   typedef CORBA_long Adv_Int32;
#if !defined(TC_IMPL_TC_Adv_Int32)
#define TC_IMPL_TC_Adv_Int32 ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Int32_struct;
#define TC_Adv_Int32 ((CORBA_TypeCode)&TC_Adv_Int32_struct)
#endif
#endif
#if !defined(_Adv_Int64_defined)
#define _Adv_Int64_defined 1
   typedef CORBA_long_long Adv_Int64;
#if !defined(TC_IMPL_TC_Adv_Int64)
#define TC_IMPL_TC_Adv_Int64 ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Int64_struct;
#define TC_Adv_Int64 ((CORBA_TypeCode)&TC_Adv_Int64_struct)
#endif
#endif
#if !defined(_Adv_Float32_defined)
#define _Adv_Float32_defined 1
   typedef CORBA_float Adv_Float32;
#if !defined(TC_IMPL_TC_Adv_Float32)
#define TC_IMPL_TC_Adv_Float32 ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Float32_struct;
#define TC_Adv_Float32 ((CORBA_TypeCode)&TC_Adv_Float32_struct)
#endif
#endif
#if !defined(_Adv_Float64_defined)
#define _Adv_Float64_defined 1
   typedef CORBA_double Adv_Float64;
#if !defined(TC_IMPL_TC_Adv_Float64)
#define TC_IMPL_TC_Adv_Float64 ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Float64_struct;
#define TC_Adv_Float64 ((CORBA_TypeCode)&TC_Adv_Float64_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Adv_SessionManager) && !defined(_Adv_SessionManager_defined)
#define ORBIT_DECL_Adv_SessionManager 1
#define _Adv_SessionManager_defined 1
#define Adv_SessionManager__free CORBA_Object__free
   typedef CORBA_Object Adv_SessionManager;
   extern CORBA_unsigned_long Adv_SessionManager__classid;
#endif
#if !defined(ORBIT_DECL_Adv_ClusterManager) && !defined(_Adv_ClusterManager_defined)
#define ORBIT_DECL_Adv_ClusterManager 1
#define _Adv_ClusterManager_defined 1
#define Adv_ClusterManager__free CORBA_Object__free
   typedef CORBA_Object Adv_ClusterManager;
   extern CORBA_unsigned_long Adv_ClusterManager__classid;
#endif
#if !defined(ORBIT_DECL_Adv_HostManager) && !defined(_Adv_HostManager_defined)
#define ORBIT_DECL_Adv_HostManager 1
#define _Adv_HostManager_defined 1
#define Adv_HostManager__free CORBA_Object__free
   typedef CORBA_Object Adv_HostManager;
   extern CORBA_unsigned_long Adv_HostManager__classid;
#endif
#if !defined(ORBIT_DECL_Adv_ProcessFactory) && !defined(_Adv_ProcessFactory_defined)
#define ORBIT_DECL_Adv_ProcessFactory 1
#define _Adv_ProcessFactory_defined 1
#define Adv_ProcessFactory__free CORBA_Object__free
   typedef CORBA_Object Adv_ProcessFactory;
   extern CORBA_unsigned_long Adv_ProcessFactory__classid;
#endif
#if !defined(ORBIT_DECL_Adv_DocumentManager) && !defined(_Adv_DocumentManager_defined)
#define ORBIT_DECL_Adv_DocumentManager 1
#define _Adv_DocumentManager_defined 1
#define Adv_DocumentManager__free CORBA_Object__free
   typedef CORBA_Object Adv_DocumentManager;
   extern CORBA_unsigned_long Adv_DocumentManager__classid;
#endif
#if !defined(ORBIT_DECL_Adv_Component) && !defined(_Adv_Component_defined)
#define ORBIT_DECL_Adv_Component 1
#define _Adv_Component_defined 1
#define Adv_Component__free CORBA_Object__free
   typedef CORBA_Object Adv_Component;
   extern CORBA_unsigned_long Adv_Component__classid;
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_Object) && !defined(_CORBA_sequence_CORBA_Object_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_Object 1
#define _CORBA_sequence_CORBA_Object_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_Object *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_Object;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_Object)
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_Object_struct;
#define TC_CORBA_sequence_CORBA_Object ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_Object_struct)
#endif
   extern CORBA_sequence_CORBA_Object
      *CORBA_sequence_CORBA_Object__alloc(void);
   extern gpointer CORBA_sequence_CORBA_Object__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_Object *CORBA_sequence_CORBA_Object_allocbuf(CORBA_unsigned_long
						      len);
#endif
#if !defined(_Adv_ObjectSeq_defined)
#define _Adv_ObjectSeq_defined 1
   typedef CORBA_sequence_CORBA_Object Adv_ObjectSeq;
#if !defined(TC_IMPL_TC_Adv_ObjectSeq)
#define TC_IMPL_TC_Adv_ObjectSeq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_ObjectSeq_struct;
#define TC_Adv_ObjectSeq ((CORBA_TypeCode)&TC_Adv_ObjectSeq_struct)
#endif
   extern Adv_ObjectSeq *Adv_ObjectSeq__alloc(void);
   extern gpointer Adv_ObjectSeq__free(gpointer mem, gpointer dat,
				       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet) && !defined(_CORBA_sequence_CORBA_octet_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define _CORBA_sequence_CORBA_octet_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_octet;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
   extern CORBA_sequence_CORBA_octet *CORBA_sequence_CORBA_octet__alloc(void);
   extern gpointer CORBA_sequence_CORBA_octet__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_octet *CORBA_sequence_CORBA_octet_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Adv_OctetSeq_defined)
#define _Adv_OctetSeq_defined 1
   typedef CORBA_sequence_CORBA_octet Adv_OctetSeq;
#if !defined(TC_IMPL_TC_Adv_OctetSeq)
#define TC_IMPL_TC_Adv_OctetSeq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_OctetSeq_struct;
#define TC_Adv_OctetSeq ((CORBA_TypeCode)&TC_Adv_OctetSeq_struct)
#endif
   extern Adv_OctetSeq *Adv_OctetSeq__alloc(void);
   extern gpointer Adv_OctetSeq__free(gpointer mem, gpointer dat,
				      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Adv_StringSeq_defined)
#define _Adv_StringSeq_defined 1
   typedef CORBA_sequence_CORBA_string Adv_StringSeq;
#if !defined(TC_IMPL_TC_Adv_StringSeq)
#define TC_IMPL_TC_Adv_StringSeq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_StringSeq_struct;
#define TC_Adv_StringSeq ((CORBA_TypeCode)&TC_Adv_StringSeq_struct)
#endif
   extern Adv_StringSeq *Adv_StringSeq__alloc(void);
   extern gpointer Adv_StringSeq__free(gpointer mem, gpointer dat,
				       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_char) && !defined(_CORBA_sequence_CORBA_char_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_char 1
#define _CORBA_sequence_CORBA_char_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_char ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_char;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_char)
#define TC_IMPL_TC_CORBA_sequence_CORBA_char ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_char_struct;
#define TC_CORBA_sequence_CORBA_char ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_char_struct)
#endif
   extern CORBA_sequence_CORBA_char *CORBA_sequence_CORBA_char__alloc(void);
   extern gpointer CORBA_sequence_CORBA_char__free(gpointer mem, gpointer dat,
						   CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char *CORBA_sequence_CORBA_char_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Adv_Int8Seq_defined)
#define _Adv_Int8Seq_defined 1
   typedef CORBA_sequence_CORBA_char Adv_Int8Seq;
#if !defined(TC_IMPL_TC_Adv_Int8Seq)
#define TC_IMPL_TC_Adv_Int8Seq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Int8Seq_struct;
#define TC_Adv_Int8Seq ((CORBA_TypeCode)&TC_Adv_Int8Seq_struct)
#endif
   extern Adv_Int8Seq *Adv_Int8Seq__alloc(void);
   extern gpointer Adv_Int8Seq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_short) && !defined(_CORBA_sequence_CORBA_short_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_short 1
#define _CORBA_sequence_CORBA_short_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_short ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_short *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_short;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_short)
#define TC_IMPL_TC_CORBA_sequence_CORBA_short ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_short_struct;
#define TC_CORBA_sequence_CORBA_short ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_short_struct)
#endif
   extern CORBA_sequence_CORBA_short *CORBA_sequence_CORBA_short__alloc(void);
   extern gpointer CORBA_sequence_CORBA_short__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_short *CORBA_sequence_CORBA_short_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Adv_Int16Seq_defined)
#define _Adv_Int16Seq_defined 1
   typedef CORBA_sequence_CORBA_short Adv_Int16Seq;
#if !defined(TC_IMPL_TC_Adv_Int16Seq)
#define TC_IMPL_TC_Adv_Int16Seq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Int16Seq_struct;
#define TC_Adv_Int16Seq ((CORBA_TypeCode)&TC_Adv_Int16Seq_struct)
#endif
   extern Adv_Int16Seq *Adv_Int16Seq__alloc(void);
   extern gpointer Adv_Int16Seq__free(gpointer mem, gpointer dat,
				      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_long) && !defined(_CORBA_sequence_CORBA_long_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_long 1
#define _CORBA_sequence_CORBA_long_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_long ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_long *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_long;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_long)
#define TC_IMPL_TC_CORBA_sequence_CORBA_long ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_long_struct;
#define TC_CORBA_sequence_CORBA_long ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_long_struct)
#endif
   extern CORBA_sequence_CORBA_long *CORBA_sequence_CORBA_long__alloc(void);
   extern gpointer CORBA_sequence_CORBA_long__free(gpointer mem, gpointer dat,
						   CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_long *CORBA_sequence_CORBA_long_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Adv_Int32Seq_defined)
#define _Adv_Int32Seq_defined 1
   typedef CORBA_sequence_CORBA_long Adv_Int32Seq;
#if !defined(TC_IMPL_TC_Adv_Int32Seq)
#define TC_IMPL_TC_Adv_Int32Seq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Int32Seq_struct;
#define TC_Adv_Int32Seq ((CORBA_TypeCode)&TC_Adv_Int32Seq_struct)
#endif
   extern Adv_Int32Seq *Adv_Int32Seq__alloc(void);
   extern gpointer Adv_Int32Seq__free(gpointer mem, gpointer dat,
				      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_float) && !defined(_CORBA_sequence_CORBA_float_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_float 1
#define _CORBA_sequence_CORBA_float_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_float ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_float *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_float;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_float)
#define TC_IMPL_TC_CORBA_sequence_CORBA_float ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_float_struct;
#define TC_CORBA_sequence_CORBA_float ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_float_struct)
#endif
   extern CORBA_sequence_CORBA_float *CORBA_sequence_CORBA_float__alloc(void);
   extern gpointer CORBA_sequence_CORBA_float__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_float *CORBA_sequence_CORBA_float_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Adv_Float32Seq_defined)
#define _Adv_Float32Seq_defined 1
   typedef CORBA_sequence_CORBA_float Adv_Float32Seq;
#if !defined(TC_IMPL_TC_Adv_Float32Seq)
#define TC_IMPL_TC_Adv_Float32Seq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Float32Seq_struct;
#define TC_Adv_Float32Seq ((CORBA_TypeCode)&TC_Adv_Float32Seq_struct)
#endif
   extern Adv_Float32Seq *Adv_Float32Seq__alloc(void);
   extern gpointer Adv_Float32Seq__free(gpointer mem, gpointer dat,
					CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_double) && !defined(_CORBA_sequence_CORBA_double_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_double 1
#define _CORBA_sequence_CORBA_double_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_double ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_double *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_double;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_double)
#define TC_IMPL_TC_CORBA_sequence_CORBA_double ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_double_struct;
#define TC_CORBA_sequence_CORBA_double ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_double_struct)
#endif
   extern CORBA_sequence_CORBA_double
      *CORBA_sequence_CORBA_double__alloc(void);
   extern gpointer CORBA_sequence_CORBA_double__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_double *CORBA_sequence_CORBA_double_allocbuf(CORBA_unsigned_long
						      len);
#endif
#if !defined(_Adv_Float64Seq_defined)
#define _Adv_Float64Seq_defined 1
   typedef CORBA_sequence_CORBA_double Adv_Float64Seq;
#if !defined(TC_IMPL_TC_Adv_Float64Seq)
#define TC_IMPL_TC_Adv_Float64Seq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Float64Seq_struct;
#define TC_Adv_Float64Seq ((CORBA_TypeCode)&TC_Adv_Float64Seq_struct)
#endif
   extern Adv_Float64Seq *Adv_Float64Seq__alloc(void);
   extern gpointer Adv_Float64Seq__free(gpointer mem, gpointer dat,
					CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Adv_HostManager) && !defined(_CORBA_sequence_Adv_HostManager_defined)
#define ORBIT_DECL_CORBA_sequence_Adv_HostManager 1
#define _CORBA_sequence_Adv_HostManager_defined 1
#define ORBIT_IMPL_CORBA_sequence_Adv_HostManager ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Adv_HostManager *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Adv_HostManager;
#if !defined(TC_IMPL_TC_CORBA_sequence_Adv_HostManager)
#define TC_IMPL_TC_CORBA_sequence_Adv_HostManager ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Adv_HostManager_struct;
#define TC_CORBA_sequence_Adv_HostManager ((CORBA_TypeCode)&TC_CORBA_sequence_Adv_HostManager_struct)
#endif
   extern CORBA_sequence_Adv_HostManager
      *CORBA_sequence_Adv_HostManager__alloc(void);
   extern gpointer CORBA_sequence_Adv_HostManager__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
   Adv_HostManager
      *CORBA_sequence_Adv_HostManager_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Adv_HostManagerSeq_defined)
#define _Adv_HostManagerSeq_defined 1
   typedef CORBA_sequence_Adv_HostManager Adv_HostManagerSeq;
#if !defined(TC_IMPL_TC_Adv_HostManagerSeq)
#define TC_IMPL_TC_Adv_HostManagerSeq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_HostManagerSeq_struct;
#define TC_Adv_HostManagerSeq ((CORBA_TypeCode)&TC_Adv_HostManagerSeq_struct)
#endif
   extern Adv_HostManagerSeq *Adv_HostManagerSeq__alloc(void);
   extern gpointer Adv_HostManagerSeq__free(gpointer mem, gpointer dat,
					    CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#ifndef Adv_HostManagerIORFile
#define Adv_HostManagerIORFile "adv-hostmanager-ior"
#endif				/* !Adv_HostManagerIORFile */

#ifndef Adv_SessionManagerIORFile
#define Adv_SessionManagerIORFile "adv-sessionmanager-ior"
#endif				/* !Adv_SessionManagerIORFile */

#if !defined(_Adv_Event_defined)
#define _Adv_Event_defined 1
   typedef struct
   {
      CORBA_Object who;
      CORBA_char *what;
      CORBA_any param;
   }
   Adv_Event;

#if !defined(TC_IMPL_TC_Adv_Event)
#define TC_IMPL_TC_Adv_Event ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_Event_struct;
#define TC_Adv_Event ((CORBA_TypeCode)&TC_Adv_Event_struct)
#endif
   extern Adv_Event *Adv_Event__alloc(void);
   extern gpointer Adv_Event__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Adv_HostState_defined)
#define _Adv_HostState_defined 1
   typedef struct
   {
      CORBA_long_long availablememory;
      CORBA_float load[3];
   }
   Adv_HostState;

#if !defined(TC_IMPL_TC_Adv_HostState)
#define TC_IMPL_TC_Adv_HostState ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_HostState_struct;
#define TC_Adv_HostState ((CORBA_TypeCode)&TC_Adv_HostState_struct)
#endif
   extern Adv_HostState *Adv_HostState__alloc(void);
   extern gpointer Adv_HostState__free(gpointer mem, gpointer dat,
				       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Adv_NamedValue_defined)
#define _Adv_NamedValue_defined 1
   typedef struct
   {
      CORBA_char *name;
      CORBA_char *value;
   }
   Adv_NamedValue;

#if !defined(TC_IMPL_TC_Adv_NamedValue)
#define TC_IMPL_TC_Adv_NamedValue ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_NamedValue_struct;
#define TC_Adv_NamedValue ((CORBA_TypeCode)&TC_Adv_NamedValue_struct)
#endif
   extern Adv_NamedValue *Adv_NamedValue__alloc(void);
   extern gpointer Adv_NamedValue__free(gpointer mem, gpointer dat,
					CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Adv_NamedValue) && !defined(_CORBA_sequence_Adv_NamedValue_defined)
#define ORBIT_DECL_CORBA_sequence_Adv_NamedValue 1
#define _CORBA_sequence_Adv_NamedValue_defined 1
#define ORBIT_IMPL_CORBA_sequence_Adv_NamedValue ORBIT_FILE_ID_adv
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Adv_NamedValue *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Adv_NamedValue;
#if !defined(TC_IMPL_TC_CORBA_sequence_Adv_NamedValue)
#define TC_IMPL_TC_CORBA_sequence_Adv_NamedValue ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Adv_NamedValue_struct;
#define TC_CORBA_sequence_Adv_NamedValue ((CORBA_TypeCode)&TC_CORBA_sequence_Adv_NamedValue_struct)
#endif
   extern CORBA_sequence_Adv_NamedValue
      *CORBA_sequence_Adv_NamedValue__alloc(void);
   extern gpointer CORBA_sequence_Adv_NamedValue__free(gpointer mem,
						       gpointer dat,
						       CORBA_boolean free_strings);	/* ORBit internal use */
   Adv_NamedValue *CORBA_sequence_Adv_NamedValue_allocbuf(CORBA_unsigned_long
							  len);
#endif
#if !defined(_Adv_NamedValueSeq_defined)
#define _Adv_NamedValueSeq_defined 1
   typedef CORBA_sequence_Adv_NamedValue Adv_NamedValueSeq;
#if !defined(TC_IMPL_TC_Adv_NamedValueSeq)
#define TC_IMPL_TC_Adv_NamedValueSeq ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct TC_Adv_NamedValueSeq_struct;
#define TC_Adv_NamedValueSeq ((CORBA_TypeCode)&TC_Adv_NamedValueSeq_struct)
#endif
   extern Adv_NamedValueSeq *Adv_NamedValueSeq__alloc(void);
   extern gpointer Adv_NamedValueSeq__free(gpointer mem, gpointer dat,
					   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Adv_SessionManager) && !defined(_Adv_SessionManager_defined)
#define ORBIT_DECL_Adv_SessionManager 1
#define _Adv_SessionManager_defined 1
#define Adv_SessionManager__free CORBA_Object__free
   typedef CORBA_Object Adv_SessionManager;
   extern CORBA_unsigned_long Adv_SessionManager__classid;
#endif
#define ex_Adv_SessionManager_NotFound "IDL:jp.ac.u-tokyo.t.q.adv/Adv/SessionManager/NotFound:1.0"
   void _ORBIT_Adv_SessionManager_NotFound_demarshal(GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev);
   void _ORBIT_Adv_SessionManager_NotFound_marshal(GIOPSendBuffer *
						   _ORBIT_send_buffer,
						   CORBA_Environment * ev);
#if !defined(_Adv_SessionManager_NotFound_defined)
#define _Adv_SessionManager_NotFound_defined 1
   typedef struct
   {
   }
   Adv_SessionManager_NotFound;

#if !defined(TC_IMPL_TC_Adv_SessionManager_NotFound)
#define TC_IMPL_TC_Adv_SessionManager_NotFound ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_Adv_SessionManager_NotFound_struct;
#define TC_Adv_SessionManager_NotFound ((CORBA_TypeCode)&TC_Adv_SessionManager_NotFound_struct)
#endif
   extern Adv_SessionManager_NotFound
      *Adv_SessionManager_NotFound__alloc(void);
   extern gpointer Adv_SessionManager_NotFound__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Adv_ClusterManager) && !defined(_Adv_ClusterManager_defined)
#define ORBIT_DECL_Adv_ClusterManager 1
#define _Adv_ClusterManager_defined 1
#define Adv_ClusterManager__free CORBA_Object__free
   typedef CORBA_Object Adv_ClusterManager;
   extern CORBA_unsigned_long Adv_ClusterManager__classid;
#endif
#if !defined(ORBIT_DECL_Adv_HostManager) && !defined(_Adv_HostManager_defined)
#define ORBIT_DECL_Adv_HostManager 1
#define _Adv_HostManager_defined 1
#define Adv_HostManager__free CORBA_Object__free
   typedef CORBA_Object Adv_HostManager;
   extern CORBA_unsigned_long Adv_HostManager__classid;
#endif
#if !defined(ORBIT_DECL_Adv_DocumentManager) && !defined(_Adv_DocumentManager_defined)
#define ORBIT_DECL_Adv_DocumentManager 1
#define _Adv_DocumentManager_defined 1
#define Adv_DocumentManager__free CORBA_Object__free
   typedef CORBA_Object Adv_DocumentManager;
   extern CORBA_unsigned_long Adv_DocumentManager__classid;
#endif
#define ex_Adv_DocumentManager_CannotFind "IDL:jp.ac.u-tokyo.t.q.adv/Adv/DocumentManager/CannotFind:1.0"
   void _ORBIT_Adv_DocumentManager_CannotFind_demarshal(GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev);
   void _ORBIT_Adv_DocumentManager_CannotFind_marshal(GIOPSendBuffer *
						      _ORBIT_send_buffer,
						      CORBA_Environment * ev);
#if !defined(_Adv_DocumentManager_CannotFind_defined)
#define _Adv_DocumentManager_CannotFind_defined 1
   typedef struct
   {
   }
   Adv_DocumentManager_CannotFind;

#if !defined(TC_IMPL_TC_Adv_DocumentManager_CannotFind)
#define TC_IMPL_TC_Adv_DocumentManager_CannotFind ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_Adv_DocumentManager_CannotFind_struct;
#define TC_Adv_DocumentManager_CannotFind ((CORBA_TypeCode)&TC_Adv_DocumentManager_CannotFind_struct)
#endif
   extern Adv_DocumentManager_CannotFind
      *Adv_DocumentManager_CannotFind__alloc(void);
   extern gpointer Adv_DocumentManager_CannotFind__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Adv_ProcessFactory) && !defined(_Adv_ProcessFactory_defined)
#define ORBIT_DECL_Adv_ProcessFactory 1
#define _Adv_ProcessFactory_defined 1
#define Adv_ProcessFactory__free CORBA_Object__free
   typedef CORBA_Object Adv_ProcessFactory;
   extern CORBA_unsigned_long Adv_ProcessFactory__classid;
#endif
#if !defined(ORBIT_DECL_Adv_Component) && !defined(_Adv_Component_defined)
#define ORBIT_DECL_Adv_Component 1
#define _Adv_Component_defined 1
#define Adv_Component__free CORBA_Object__free
   typedef CORBA_Object Adv_Component;
   extern CORBA_unsigned_long Adv_Component__classid;
#endif
#if !defined(ORBIT_DECL_Adv_DocAccessor) && !defined(_Adv_DocAccessor_defined)
#define ORBIT_DECL_Adv_DocAccessor 1
#define _Adv_DocAccessor_defined 1
#define Adv_DocAccessor__free CORBA_Object__free
   typedef CORBA_Object Adv_DocAccessor;
   extern CORBA_unsigned_long Adv_DocAccessor__classid;
#endif
#if !defined(ORBIT_DECL_Adv_DocStorage) && !defined(_Adv_DocStorage_defined)
#define ORBIT_DECL_Adv_DocStorage 1
#define _Adv_DocStorage_defined 1
#define Adv_DocStorage__free CORBA_Object__free
   typedef CORBA_Object Adv_DocStorage;
   extern CORBA_unsigned_long Adv_DocStorage__classid;
#endif
#define ex_Adv_DocStorage_NoSuchDocument "IDL:jp.ac.u-tokyo.t.q.adv/Adv/DocStorage/NoSuchDocument:1.0"
   void _ORBIT_Adv_DocStorage_NoSuchDocument_demarshal(GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment *
						       ev);
   void _ORBIT_Adv_DocStorage_NoSuchDocument_marshal(GIOPSendBuffer *
						     _ORBIT_send_buffer,
						     CORBA_Environment * ev);
#if !defined(_Adv_DocStorage_NoSuchDocument_defined)
#define _Adv_DocStorage_NoSuchDocument_defined 1
   typedef struct
   {
   }
   Adv_DocStorage_NoSuchDocument;

#if !defined(TC_IMPL_TC_Adv_DocStorage_NoSuchDocument)
#define TC_IMPL_TC_Adv_DocStorage_NoSuchDocument ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_Adv_DocStorage_NoSuchDocument_struct;
#define TC_Adv_DocStorage_NoSuchDocument ((CORBA_TypeCode)&TC_Adv_DocStorage_NoSuchDocument_struct)
#endif
   extern Adv_DocStorage_NoSuchDocument
      *Adv_DocStorage_NoSuchDocument__alloc(void);
   extern gpointer Adv_DocStorage_NoSuchDocument__free(gpointer mem,
						       gpointer dat,
						       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Adv_DocStorage_NotEnoughMemory "IDL:jp.ac.u-tokyo.t.q.adv/Adv/DocStorage/NotEnoughMemory:1.0"
   void _ORBIT_Adv_DocStorage_NotEnoughMemory_demarshal(GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev);
   void _ORBIT_Adv_DocStorage_NotEnoughMemory_marshal(GIOPSendBuffer *
						      _ORBIT_send_buffer,
						      CORBA_Environment * ev);
#if !defined(_Adv_DocStorage_NotEnoughMemory_defined)
#define _Adv_DocStorage_NotEnoughMemory_defined 1
   typedef struct
   {
   }
   Adv_DocStorage_NotEnoughMemory;

#if !defined(TC_IMPL_TC_Adv_DocStorage_NotEnoughMemory)
#define TC_IMPL_TC_Adv_DocStorage_NotEnoughMemory ORBIT_FILE_ID_adv
   extern const struct CORBA_TypeCode_struct
      TC_Adv_DocStorage_NotEnoughMemory_struct;
#define TC_Adv_DocStorage_NotEnoughMemory ((CORBA_TypeCode)&TC_Adv_DocStorage_NotEnoughMemory_struct)
#endif
   extern Adv_DocStorage_NotEnoughMemory
      *Adv_DocStorage_NotEnoughMemory__alloc(void);
   extern gpointer Adv_DocStorage_NotEnoughMemory__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Adv_Container) && !defined(_Adv_Container_defined)
#define ORBIT_DECL_Adv_Container 1
#define _Adv_Container_defined 1
#define Adv_Container__free CORBA_Object__free
   typedef CORBA_Object Adv_Container;
   extern CORBA_unsigned_long Adv_Container__classid;
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      CORBA_char *(*GetUserName) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
      Adv_HostManagerSeq *(*GetHostManagers) (PortableServer_Servant _servant,
					      CORBA_Environment * ev);
      CORBA_char *(*GetLocation) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
      void (*ResistComponent) (PortableServer_Servant _servant,
			       Adv_Component component,
			       CORBA_Environment * ev);
      Adv_StringSeq *(*GetHTML) (PortableServer_Servant _servant,
				 CORBA_char * method, CORBA_char * object,
				 Adv_NamedValueSeq * header,
				 Adv_NamedValueSeq * params,
				 CORBA_Environment * ev);
   }
   POA_Adv_SessionManager__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_SessionManager__epv *Adv_SessionManager_epv;
   }
   POA_Adv_SessionManager__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_SessionManager__vepv *vepv;
   }
   POA_Adv_SessionManager;
   extern void POA_Adv_SessionManager__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Adv_SessionManager__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*ResistHostManager) (PortableServer_Servant _servant,
				 Adv_HostManager hostmanager,
				 CORBA_Environment * ev);
      Adv_HostManagerSeq *(*GetHostManagers) (PortableServer_Servant _servant,
					      CORBA_Environment * ev);
   }
   POA_Adv_ClusterManager__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_ClusterManager__epv *Adv_ClusterManager_epv;
   }
   POA_Adv_ClusterManager__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_ClusterManager__vepv *vepv;
   }
   POA_Adv_ClusterManager;
   extern void POA_Adv_ClusterManager__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Adv_ClusterManager__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*GetHostName) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
      CORBA_char *(*GetHostIP) (PortableServer_Servant _servant,
				CORBA_Environment * ev);
       Adv_HostState(*GetHostState) (PortableServer_Servant _servant,
				     CORBA_Environment * ev);
       Adv_ProcessFactory(*GetProcessFactory) (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev);
       Adv_DocumentManager(*GetDocumentManager) (PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev);
   }
   POA_Adv_HostManager__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_HostManager__epv *Adv_HostManager_epv;
   }
   POA_Adv_HostManager__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_HostManager__vepv *vepv;
   }
   POA_Adv_HostManager;
   extern void POA_Adv_HostManager__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_Adv_HostManager__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*Export) (PortableServer_Servant _servant,
			     CORBA_char * locator, CORBA_Environment * ev);
      CORBA_char *(*Unexport) (PortableServer_Servant _servant,
			       CORBA_char * locator, CORBA_Environment * ev);
      Adv_StringSeq *(*GetList) (PortableServer_Servant _servant,
				 CORBA_Environment * ev);
      CORBA_char *(*QueryDocumentID) (PortableServer_Servant _servant,
				      CORBA_char * id,
				      CORBA_Environment * ev);
      CORBA_char *(*QueryLocator) (PortableServer_Servant _servant,
				   CORBA_char * locator,
				   CORBA_Environment * ev);
   }
   POA_Adv_DocumentManager__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_DocumentManager__epv *Adv_DocumentManager_epv;
   }
   POA_Adv_DocumentManager__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_DocumentManager__vepv *vepv;
   }
   POA_Adv_DocumentManager;
   extern void POA_Adv_DocumentManager__init(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   extern void POA_Adv_DocumentManager__fini(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*Execute) (PortableServer_Servant _servant,
		       CORBA_char * modulepath, CORBA_Environment * ev);
   }
   POA_Adv_ProcessFactory__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_ProcessFactory__epv *Adv_ProcessFactory_epv;
   }
   POA_Adv_ProcessFactory__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_ProcessFactory__vepv *vepv;
   }
   POA_Adv_ProcessFactory;
   extern void POA_Adv_ProcessFactory__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Adv_ProcessFactory__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*GetName) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
      void (*Deactivate) (PortableServer_Servant _servant,
			  CORBA_Environment * ev);
      void (*ConnectObserver) (PortableServer_Servant _servant,
			       Adv_Component obs, CORBA_Environment * ev);
      void (*Pushed) (PortableServer_Servant _servant, Adv_Event * event,
		      CORBA_Environment * ev);
      Adv_StringSeq *(*GetHTML) (PortableServer_Servant _servant,
				 CORBA_char * method,
				 Adv_NamedValueSeq * header,
				 Adv_NamedValueSeq * params,
				 CORBA_Environment * ev);
   }
   POA_Adv_Component__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_Component__epv *Adv_Component_epv;
   }
   POA_Adv_Component__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_Component__vepv *vepv;
   }
   POA_Adv_Component;
   extern void POA_Adv_Component__init(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   extern void POA_Adv_Component__fini(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*GetDocumentID) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
       CORBA_boolean(*GetNthProperty) (PortableServer_Servant _servant,
				       CORBA_long n, CORBA_char ** key,
				       CORBA_char ** val,
				       CORBA_Environment * ev);
       CORBA_boolean(*GetProperty) (PortableServer_Servant _servant,
				    CORBA_char * key, CORBA_char ** val,
				    CORBA_Environment * ev);
      void (*SetProperty) (PortableServer_Servant _servant, CORBA_char * key,
			   CORBA_char * val, CORBA_Environment * ev);
      void (*UnsetNthProperty) (PortableServer_Servant _servant, CORBA_long n,
				CORBA_Environment * ev);
       CORBA_long(*GetSize) (PortableServer_Servant _servant,
			     CORBA_Environment * ev);
       CORBA_long(*GetOctet) (PortableServer_Servant _servant,
			      Adv_Int64 offset, Adv_Int32 length,
			      Adv_OctetSeq ** buffer, CORBA_Environment * ev);
       CORBA_long(*SetOctet) (PortableServer_Servant _servant,
			      Adv_Int64 offset, Adv_OctetSeq * buffer,
			      CORBA_Environment * ev);
   }
   POA_Adv_DocAccessor__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_DocAccessor__epv *Adv_DocAccessor_epv;
   }
   POA_Adv_DocAccessor__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_DocAccessor__vepv *vepv;
   }
   POA_Adv_DocAccessor;
   extern void POA_Adv_DocAccessor__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_Adv_DocAccessor__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_long(*GetNumDocuments) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
      void (*Clear) (PortableServer_Servant _servant, CORBA_Environment * ev);
      
	 Adv_DocAccessor(*Create) (PortableServer_Servant _servant,
				   CORBA_char * documentid,
				   CORBA_Environment * ev);
       Adv_DocAccessor(*OpenNth) (PortableServer_Servant _servant,
				  CORBA_long n, CORBA_Environment * ev);
       Adv_DocAccessor(*OpenByDocumentID) (PortableServer_Servant _servant,
					   CORBA_char * documentid,
					   CORBA_Environment * ev);
       Adv_DocAccessor(*OpenByProperty) (PortableServer_Servant _servant,
					 Adv_DocAccessor prev,
					 Adv_StringSeq * properties,
					 CORBA_Environment * ev);
   }
   POA_Adv_DocStorage__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_DocStorage__epv *Adv_DocStorage_epv;
   }
   POA_Adv_DocStorage__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_DocStorage__vepv *vepv;
   }
   POA_Adv_DocStorage;
   extern void POA_Adv_DocStorage__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Adv_DocStorage__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
   }
   POA_Adv_Container__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Adv_Component__epv *Adv_Component_epv;
      POA_Adv_Container__epv *Adv_Container_epv;
   }
   POA_Adv_Container__vepv;
   typedef struct
   {
      void *_private;
      POA_Adv_Container__vepv *vepv;
   }
   POA_Adv_Container;
   extern void POA_Adv_Container__init(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   extern void POA_Adv_Container__fini(PortableServer_Servant servant,
				       CORBA_Environment * ev);

/** prototypes **/
   CORBA_char *Adv_SessionManager_GetUserName(Adv_SessionManager _obj,
					      CORBA_Environment * ev);
   Adv_HostManagerSeq *Adv_SessionManager_GetHostManagers(Adv_SessionManager
							  _obj,
							  CORBA_Environment *
							  ev);
   CORBA_char *Adv_SessionManager_GetLocation(Adv_SessionManager _obj,
					      CORBA_Environment * ev);
   void Adv_SessionManager_ResistComponent(Adv_SessionManager _obj,
					   Adv_Component component,
					   CORBA_Environment * ev);
   Adv_StringSeq *Adv_SessionManager_GetHTML(Adv_SessionManager _obj,
					     CORBA_char * method,
					     CORBA_char * object,
					     Adv_NamedValueSeq * header,
					     Adv_NamedValueSeq * params,
					     CORBA_Environment * ev);
   void Adv_ClusterManager_ResistHostManager(Adv_ClusterManager _obj,
					     Adv_HostManager hostmanager,
					     CORBA_Environment * ev);
   Adv_HostManagerSeq *Adv_ClusterManager_GetHostManagers(Adv_ClusterManager
							  _obj,
							  CORBA_Environment *
							  ev);
   CORBA_char *Adv_HostManager_GetHostName(Adv_HostManager _obj,
					   CORBA_Environment * ev);
   CORBA_char *Adv_HostManager_GetHostIP(Adv_HostManager _obj,
					 CORBA_Environment * ev);
   Adv_HostState Adv_HostManager_GetHostState(Adv_HostManager _obj,
					      CORBA_Environment * ev);
   Adv_ProcessFactory Adv_HostManager_GetProcessFactory(Adv_HostManager _obj,
							CORBA_Environment *
							ev);
   Adv_DocumentManager Adv_HostManager_GetDocumentManager(Adv_HostManager
							  _obj,
							  CORBA_Environment *
							  ev);
   CORBA_char *Adv_DocumentManager_Export(Adv_DocumentManager _obj,
					  CORBA_char * locator,
					  CORBA_Environment * ev);
   CORBA_char *Adv_DocumentManager_Unexport(Adv_DocumentManager _obj,
					    CORBA_char * locator,
					    CORBA_Environment * ev);
   Adv_StringSeq *Adv_DocumentManager_GetList(Adv_DocumentManager _obj,
					      CORBA_Environment * ev);
   CORBA_char *Adv_DocumentManager_QueryDocumentID(Adv_DocumentManager _obj,
						   CORBA_char * id,
						   CORBA_Environment * ev);
   CORBA_char *Adv_DocumentManager_QueryLocator(Adv_DocumentManager _obj,
						CORBA_char * locator,
						CORBA_Environment * ev);
   void Adv_ProcessFactory_Execute(Adv_ProcessFactory _obj,
				   CORBA_char * modulepath,
				   CORBA_Environment * ev);
   CORBA_char *Adv_Component_GetName(Adv_Component _obj,
				     CORBA_Environment * ev);
   void Adv_Component_Deactivate(Adv_Component _obj, CORBA_Environment * ev);
   void Adv_Component_ConnectObserver(Adv_Component _obj, Adv_Component obs,
				      CORBA_Environment * ev);
   void Adv_Component_Pushed(Adv_Component _obj, Adv_Event * event,
			     CORBA_Environment * ev);
   Adv_StringSeq *Adv_Component_GetHTML(Adv_Component _obj,
					CORBA_char * method,
					Adv_NamedValueSeq * header,
					Adv_NamedValueSeq * params,
					CORBA_Environment * ev);
   CORBA_char *Adv_DocAccessor_GetDocumentID(Adv_DocAccessor _obj,
					     CORBA_Environment * ev);
   CORBA_boolean Adv_DocAccessor_GetNthProperty(Adv_DocAccessor _obj,
						CORBA_long n,
						CORBA_char ** key,
						CORBA_char ** val,
						CORBA_Environment * ev);
   CORBA_boolean Adv_DocAccessor_GetProperty(Adv_DocAccessor _obj,
					     CORBA_char * key,
					     CORBA_char ** val,
					     CORBA_Environment * ev);
   void Adv_DocAccessor_SetProperty(Adv_DocAccessor _obj, CORBA_char * key,
				    CORBA_char * val, CORBA_Environment * ev);
   void Adv_DocAccessor_UnsetNthProperty(Adv_DocAccessor _obj, CORBA_long n,
					 CORBA_Environment * ev);
   CORBA_long Adv_DocAccessor_GetSize(Adv_DocAccessor _obj,
				      CORBA_Environment * ev);
   CORBA_long Adv_DocAccessor_GetOctet(Adv_DocAccessor _obj, Adv_Int64 offset,
				       Adv_Int32 length,
				       Adv_OctetSeq ** buffer,
				       CORBA_Environment * ev);
   CORBA_long Adv_DocAccessor_SetOctet(Adv_DocAccessor _obj, Adv_Int64 offset,
				       Adv_OctetSeq * buffer,
				       CORBA_Environment * ev);
   CORBA_long Adv_DocStorage_GetNumDocuments(Adv_DocStorage _obj,
					     CORBA_Environment * ev);
   void Adv_DocStorage_Clear(Adv_DocStorage _obj, CORBA_Environment * ev);
   Adv_DocAccessor Adv_DocStorage_Create(Adv_DocStorage _obj,
					 CORBA_char * documentid,
					 CORBA_Environment * ev);
   Adv_DocAccessor Adv_DocStorage_OpenNth(Adv_DocStorage _obj, CORBA_long n,
					  CORBA_Environment * ev);
   Adv_DocAccessor Adv_DocStorage_OpenByDocumentID(Adv_DocStorage _obj,
						   CORBA_char * documentid,
						   CORBA_Environment * ev);
   Adv_DocAccessor Adv_DocStorage_OpenByProperty(Adv_DocStorage _obj,
						 Adv_DocAccessor prev,
						 Adv_StringSeq * properties,
						 CORBA_Environment * ev);
#define Adv_Container_GetName Adv_Component_GetName
#define Adv_Container_Deactivate Adv_Component_Deactivate
#define Adv_Container_ConnectObserver Adv_Component_ConnectObserver
#define Adv_Container_Pushed Adv_Component_Pushed
#define Adv_Container_GetHTML Adv_Component_GetHTML

   void _ORBIT_skel_Adv_SessionManager_GetUserName(POA_Adv_SessionManager *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   CORBA_char *
						   (*_impl_GetUserName)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Adv_SessionManager_GetHostManagers(POA_Adv_SessionManager
						       * _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       Adv_HostManagerSeq *
						       (*_impl_GetHostManagers)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Adv_SessionManager_GetLocation(POA_Adv_SessionManager *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   CORBA_char *
						   (*_impl_GetLocation)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Adv_SessionManager_ResistComponent(POA_Adv_SessionManager
						       * _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       void
						       (*_impl_ResistComponent)
						       (PortableServer_Servant
							_servant,
							Adv_Component
							component,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Adv_SessionManager_GetHTML(POA_Adv_SessionManager *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       Adv_StringSeq *
					       (*_impl_GetHTML)
					       (PortableServer_Servant
						_servant, CORBA_char * method,
						CORBA_char * object,
						Adv_NamedValueSeq * header,
						Adv_NamedValueSeq * params,
						CORBA_Environment * ev));
   void
      _ORBIT_skel_Adv_ClusterManager_ResistHostManager(POA_Adv_ClusterManager
						       * _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       void
						       (*_impl_ResistHostManager)
						       (PortableServer_Servant
							_servant,
							Adv_HostManager
							hostmanager,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Adv_ClusterManager_GetHostManagers(POA_Adv_ClusterManager
						       * _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       Adv_HostManagerSeq *
						       (*_impl_GetHostManagers)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Adv_HostManager_GetHostName(POA_Adv_HostManager *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						CORBA_char *
						(*_impl_GetHostName)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Adv_HostManager_GetHostIP(POA_Adv_HostManager *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_char *
					      (*_impl_GetHostIP)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Adv_HostManager_GetHostState(POA_Adv_HostManager *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 Adv_HostState
						 (*_impl_GetHostState)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Adv_HostManager_GetProcessFactory(POA_Adv_HostManager *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      Adv_ProcessFactory
						      (*_impl_GetProcessFactory)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Adv_HostManager_GetDocumentManager(POA_Adv_HostManager *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       Adv_DocumentManager
						       (*_impl_GetDocumentManager)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Adv_DocumentManager_Export(POA_Adv_DocumentManager *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_char *
					       (*_impl_Export)
					       (PortableServer_Servant
						_servant,
						CORBA_char * locator,
						CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocumentManager_Unexport(POA_Adv_DocumentManager *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 CORBA_char *
						 (*_impl_Unexport)
						 (PortableServer_Servant
						  _servant,
						  CORBA_char * locator,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocumentManager_GetList(POA_Adv_DocumentManager *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						Adv_StringSeq *
						(*_impl_GetList)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void
      _ORBIT_skel_Adv_DocumentManager_QueryDocumentID(POA_Adv_DocumentManager
						      * _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_char *
						      (*_impl_QueryDocumentID)
						      (PortableServer_Servant
						       _servant,
						       CORBA_char * id,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Adv_DocumentManager_QueryLocator(POA_Adv_DocumentManager *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     CORBA_char *
						     (*_impl_QueryLocator)
						     (PortableServer_Servant
						      _servant,
						      CORBA_char * locator,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Adv_ProcessFactory_Execute(POA_Adv_ProcessFactory *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_Execute)
					       (PortableServer_Servant
						_servant,
						CORBA_char * modulepath,
						CORBA_Environment * ev));
   void _ORBIT_skel_Adv_Component_GetName(POA_Adv_Component * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  CORBA_char *
					  (*_impl_GetName)
					  (PortableServer_Servant _servant,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Adv_Component_Deactivate(POA_Adv_Component *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_Deactivate)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Adv_Component_ConnectObserver(POA_Adv_Component *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void
						  (*_impl_ConnectObserver)
						  (PortableServer_Servant
						   _servant,
						   Adv_Component obs,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Adv_Component_Pushed(POA_Adv_Component * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_Pushed)
					 (PortableServer_Servant _servant,
					  Adv_Event * event,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Adv_Component_GetHTML(POA_Adv_Component * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  Adv_StringSeq *
					  (*_impl_GetHTML)
					  (PortableServer_Servant _servant,
					   CORBA_char * method,
					   Adv_NamedValueSeq * header,
					   Adv_NamedValueSeq * params,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocAccessor_GetDocumentID(POA_Adv_DocAccessor *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_char *
						  (*_impl_GetDocumentID)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocAccessor_GetNthProperty(POA_Adv_DocAccessor *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   CORBA_boolean
						   (*_impl_GetNthProperty)
						   (PortableServer_Servant
						    _servant, CORBA_long n,
						    CORBA_char ** key,
						    CORBA_char ** val,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocAccessor_GetProperty(POA_Adv_DocAccessor *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						CORBA_boolean
						(*_impl_GetProperty)
						(PortableServer_Servant
						 _servant, CORBA_char * key,
						 CORBA_char ** val,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocAccessor_SetProperty(POA_Adv_DocAccessor *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_SetProperty)
						(PortableServer_Servant
						 _servant, CORBA_char * key,
						 CORBA_char * val,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocAccessor_UnsetNthProperty(POA_Adv_DocAccessor *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void
						     (*_impl_UnsetNthProperty)
						     (PortableServer_Servant
						      _servant, CORBA_long n,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Adv_DocAccessor_GetSize(POA_Adv_DocAccessor *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    CORBA_long(*_impl_GetSize)
					    (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocAccessor_GetOctet(POA_Adv_DocAccessor *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     CORBA_long(*_impl_GetOctet)
					     (PortableServer_Servant _servant,
					      Adv_Int64 offset,
					      Adv_Int32 length,
					      Adv_OctetSeq ** buffer,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocAccessor_SetOctet(POA_Adv_DocAccessor *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     CORBA_long(*_impl_SetOctet)
					     (PortableServer_Servant _servant,
					      Adv_Int64 offset,
					      Adv_OctetSeq * buffer,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocStorage_GetNumDocuments(POA_Adv_DocStorage *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   CORBA_long
						   (*_impl_GetNumDocuments)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocStorage_Clear(POA_Adv_DocStorage * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_Clear)
					 (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocStorage_Create(POA_Adv_DocStorage * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  Adv_DocAccessor(*_impl_Create)
					  (PortableServer_Servant _servant,
					   CORBA_char * documentid,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocStorage_OpenNth(POA_Adv_DocStorage *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   Adv_DocAccessor(*_impl_OpenNth)
					   (PortableServer_Servant _servant,
					    CORBA_long n,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocStorage_OpenByDocumentID(POA_Adv_DocStorage *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    Adv_DocAccessor
						    (*_impl_OpenByDocumentID)
						    (PortableServer_Servant
						     _servant,
						     CORBA_char * documentid,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Adv_DocStorage_OpenByProperty(POA_Adv_DocStorage *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  Adv_DocAccessor
						  (*_impl_OpenByProperty)
						  (PortableServer_Servant
						   _servant,
						   Adv_DocAccessor prev,
						   Adv_StringSeq * properties,
						   CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
